DELIMITER //

CREATE  PROCEDURE `ADMIN.authuser` (
IN DNIS VARCHAR2,
MSISDN IN VARCHAR2,
AVPAIR1 OUT VARCHAR2,
AVPAIR2 OUT VARCHAR2,
DNS1 OUT grp.dns1%TYPE,
DNS2 OUT grp.dns2%TYPE,
AUTHSTAT OUT VARCHAR2 ) AS

dns1_tmp grp.dns1%TYPE;
dns2_tmp grp.dns2%TYPE;
avpair1_tmp varchar2(100);
avpair2_tmp varchar2(100);
grpid_tmp number;
GROUPID number;
newmsisdn varchar2(12) := MSISDN;
newdnis  varchar2(12) := DNIS;

CURSOR C_USER IS
  SELECT AvPair1, AvPair2, DNS1, DNS2, GRP.GROUPID
    FROM grp, allmember
   WHERE grp.dnis=newdnis
AND allmember.msisdn=newmsisdn AND allmember.groupid=grp.groupid
UNION
  SELECT AvPair1, AvPair2, DNS1, DNS2, GRP.GROUPID
    FROM grp
   WHERE grp.dnis=newdnis and grp.universal = 1;

BEGIN

OPEN C_USER;

FETCH C_USER INTO AVPAIR1, AVPAIR2, DNS1, DNS2, GROUPID;

LOOP
  FETCH C_USER INTO avpair1_tmp, avpair2_tmp, dns1_tmp, dns2_tmp, grpid_tmp;
  EXIT WHEN C_USER%NOTFOUND;
  INSERT INTO duplog VALUES(DNIS, MSISDN, avpair1_tmp, avpair2_tmp, dns1_tmp,
       dns2_tmp, grpid_tmp, SYSDATE);
END LOOP;

IF C_USER%ROWCOUNT > 1 THEN
  INSERT INTO duplog VALUES(DNIS, MSISDN, AVPAIR1, AVPAIR2, DNS1,
       DNS2, GROUPID, SYSDATE);
  AUTHSTAT := 'ok';
ELSIF C_USER%ROWCOUNT = 1 THEN
  AUTHSTAT := 'ok';
ELSE
  AUTHSTAT := NULL;
END IF;

CLOSE C_USER;
COMMIT;

END;
/

Views:

DROP VIEW ADMIN.ALLMEMBER;

/* Formatted on 2/2/2015 12:58:20 PM (QP5 v5.265.14096.37972) */
CREATE OR REPLACE FORCE VIEW ADMIN.ALLMEMBER
(
   GROUPID,
   MSISDN,
   ADDTIME,
   MODTIME,
   USERLASTMOD
)
AS
   SELECT "GROUPID",
          "MSISDN",
          "ADDTIME",
          "MODTIME",
          "USERLASTMOD"
     FROM MEMBER
   UNION
   SELECT "GROUPID",
          "MSISDN",
          "ADDTIME",
          "MODTIME",
          "USERLASTMOD"
     FROM admin.and2_view;


DROP VIEW ADMIN.AND2_VIEW;

/* Formatted on 2/2/2015 12:58:20 PM (QP5 v5.265.14096.37972) */
CREATE OR REPLACE FORCE VIEW ADMIN.AND2_VIEW
(
   GROUPID,
   MSISDN,
   ADDTIME,
   MODTIME,
   USERLASTMOD
)
AS
   SELECT (groupid + 1) AS groupid,
          msisdn,
          addtime,
          modtime,
          userlastmod
     FROM MEMBER
    WHERE groupid IN (SELECT groupid
                        FROM grp
                       WHERE    groupname = 'FRANCETELECOM_AND_PPP_PROD'
                             OR groupname = 'OTESAT_AND-PLC_PPP_PROD');


CREATE OR REPLACE PUBLIC SYNONYM ALLMEMBER FOR ADMIN.ALLMEMBER;

Constraints:

ALTER TABLE ADMIN.ADMIN MODIFY 
  USERNAME NULL;

ALTER TABLE ADMIN.ADMIN MODIFY 
  FULLNAME NULL;

ALTER TABLE ADMIN.ADMIN MODIFY 
  ACCESSNUM NULL;

ALTER TABLE ADMIN.ADMIN MODIFY 
  PASSWORD NULL;

ALTER TABLE ADMIN.ADMIN
  DROP CONSTRAINT PK_USERNAME;

ALTER TABLE ADMIN.ADMIN MODIFY 
  USERNAME NOT NULL
  ENABLE VALIDATE;

ALTER TABLE ADMIN.ADMIN MODIFY 
  FULLNAME NOT NULL
  ENABLE VALIDATE;

ALTER TABLE ADMIN.ADMIN MODIFY 
  ACCESSNUM NOT NULL
  ENABLE VALIDATE;

ALTER TABLE ADMIN.ADMIN MODIFY 
  PASSWORD NOT NULL
  ENABLE VALIDATE;

ALTER TABLE ADMIN.ADMIN ADD (
  CONSTRAINT PK_USERNAME
  PRIMARY KEY
  (USERNAME)
  ENABLE VALIDATE);


ALTER TABLE ADMIN.GRP MODIFY 
  GROUPID NULL;

ALTER TABLE ADMIN.GRP MODIFY 
  DNIS NULL;

ALTER TABLE ADMIN.GRP MODIFY 
  GROUPNAME NULL;

ALTER TABLE ADMIN.GRP MODIFY 
  ADDTIME NULL;

ALTER TABLE ADMIN.GRP
  DROP CONSTRAINT PK_GRP;

ALTER TABLE ADMIN.GRP MODIFY 
  GROUPID NOT NULL
  ENABLE VALIDATE;

ALTER TABLE ADMIN.GRP MODIFY 
  DNIS NOT NULL
  ENABLE VALIDATE;

ALTER TABLE ADMIN.GRP MODIFY 
  GROUPNAME NOT NULL
  ENABLE VALIDATE;

ALTER TABLE ADMIN.GRP MODIFY 
  ADDTIME NOT NULL
  ENABLE VALIDATE;

ALTER TABLE ADMIN.GRP ADD (
  CONSTRAINT PK_GRP
  PRIMARY KEY
  (GROUPID)
  ENABLE VALIDATE);


ALTER TABLE ADMIN.MEMBER
  DROP CONSTRAINT FK_GROUP_GROUPID;

ALTER TABLE ADMIN.MEMBER MODIFY 
  MSISDN NULL;

ALTER TABLE ADMIN.MEMBER MODIFY 
  ADDTIME NULL;

ALTER TABLE ADMIN.MEMBER
  DROP CONSTRAINT PK_MEMBER;

ALTER TABLE ADMIN.MEMBER MODIFY 
  MSISDN NOT NULL
  ENABLE VALIDATE;

ALTER TABLE ADMIN.MEMBER MODIFY 
  ADDTIME NOT NULL
  ENABLE VALIDATE;

ALTER TABLE ADMIN.MEMBER ADD (
  CONSTRAINT PK_MEMBER
  PRIMARY KEY
  (GROUPID, MSISDN)
  ENABLE VALIDATE);


ALTER TABLE ADMIN.MEMBER ADD (
  CONSTRAINT FK_GROUP_GROUPID 
  FOREIGN KEY (GROUPID) 
  REFERENCES ADMIN.GRP (GROUPID)
  ENABLE VALIDATE);
